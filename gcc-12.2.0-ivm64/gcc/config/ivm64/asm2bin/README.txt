A flex/bison implementation of the IVM64 assembler.

The assembly process is completed in two phases:
    - phase 0 (as0) which converts high level (sugared) assembler to
      a native representation. This high level assembler is this one
      generated by the ivm64-gcc compiler.

    - phase 1 (as1) which converts the native isa representation
      to binary. This binary can be simulated by IVM simulators.
      The name of the binary written by this phase is 'z.bin'.
      Also a file 'z.sym' with the symbol table is generated.

This two phases are thought to be used as a pipeline:
    cat a.out | ./as0 | ./as1

Also an optimization phase (asopt1) that makes some basic optimizations
to the native assembly generated by as0 can be used:
    cat a.out | ./as0 | ./asopt1 | ./as1

A wrapper script, ivm64-asm2bin, is available to assemble in one go:

    ./ivm64-asm2bin
    Translate an ivm64 assembly file, as produced by ivm64-gcc to binary
    Usage:
     # By default it generates <prog>.b and <prog>.sym
       ivm64-asm2bin.sh a.out  # generating a.b, a.sym

     # Using an entry point
       ivm64-asm2bin.sh -e entry_point a.out

     # Defining output files (binary and symbols)
       ivm64-asm2bin.sh --bin a.bin --sym a.sym a.out

     # Using the preprocessor to solve complex aliases
       ivm64-asm2bin.sh -p a.out

     # Do not optimize for size
       ivm64-asm2bin.sh -noopt a.out

     # Set the maximum number of passes until converging
     # in size (if exceeded, it re-runs with no optimization)
     #   IVM64_BISON_MAX_PASSES=100 ivm64-asm2bin.sh a.out
